# SQL Server Administration Queries:

# ************************************************************************************************************ 

#Disk mount Volume Report:

SELECT DISTINCT 
volume_mount_point [Disk Mount Point], 
file_system_type [File System Type], 
logical_volume_name as [Logical Drive Name], 
CONVERT(DECIMAL(18,2),total_bytes/1073741824.0) AS [Total Size in GB],
CONVERT(DECIMAL(18,2),available_bytes/1073741824.0) AS [Available Size in GB], 
CAST(CAST(available_bytes AS FLOAT)/ CAST(total_bytes AS FLOAT) AS DECIMAL(18,2)) * 100 AS [Space Free %] 
FROM sys.master_files CROSS APPLY sys.dm_os_volume_stats(database_id, file_id)

#Disk Report for SQL Server:

SELECT 
physical_device_name, 
backup_start_date, 
backup_finish_date, 
backup_size/1024.0 AS BackupSizeKB 
FROM 
msdb.dbo.backupset b JOIN msdb.dbo.backupmediafamily m 
ON b.media_set_id = m.media_set_id 
WHERE database_name = '<YOURDB>' ORDER BY backup_finish_date DESC

#Disk Check Report for SQL Server:

SELECT 
(SELECT SUM(CAST(df.size as float)) 
FROM sys.database_files AS df 
WHERE df.type in ( 0, 2, 4 ) ) AS [DbSize_MB], 
SUM(a.total_pages) AS [SpaceUsed_MB], 
(SELECT SUM(CAST(df.size as float)) 
FROM 
sys.database_files AS df 
WHERE df.type in (1, 3)) AS [LogSize_MB] 
FROM 
sys.partitions p join sys.allocation_units a 
on p.partition_id = a.container_id 
left join sys.internal_tables it 
on p.object_id = it.object_id

# Which Drive SQL instance is installed:

DECLARE @InstanceName varchar(100), 
      @InstanceLocation varchar(100),
      @InstancePath varchar(100)
      
SELECT @InstanceName = convert(varchar, ServerProperty('InstanceName'))
EXEC master..xp_regread @rootkey='HKEY_LOCAL_MACHINE',
  @key='Software\Microsoft\Microsoft SQL Server\Instance Names\SQL',
  @value_name=@InstanceName,
  @value=@InstanceLocation OUTPUT
SELECT @InstanceLocation = 'Software\Microsoft\Microsoft SQL Server\'+@InstanceLocation+'\Setup'

EXEC master..xp_regread @rootkey='HKEY_LOCAL_MACHINE',
  @key=@InstanceLocation,
  @value_name='SQLPath',
  @value=@InstancePath OUTPUT
SELECT @InstancePath

# Get the Hostname of the SQL server

SELECT SERVERPROPERTY('ComputerNamePhysicalNetBIOS') AS Hostname




# ****************************************************************************************************************

# SQL Invntory Script

SET NOCOUNT ON;
SELECT 
(SELECT SERVERPROPERTY('ComputerNamePhysicalNetBIOS')) AS HOSTNAME,
(SELECT SERVERPROPERTY('ServerName')) AS SQL_INST_NAME,
(SELECT SERVERPROPERTY('Collation')) AS SQL_COLLATION,
(SELECT SERVERPROPERTY('Edition')) AS SQL_EDITION,
--(SELECT SERVERPROPERTY('ProductMajorVersion')) AS SQL_PRODUCT,
(SELECT SERVERPROPERTY('ProductVersion')) AS SQL_VERSION,
(SELECT SERVERPROPERTY('EngineEdition')) AS SQL_ENGINE,
--(SELECT SERVERPROPERTY('LicenseType')) AS SQL_LICENSE,
(SELECT SERVERPROPERTY('ProductLevel')) AS SQL_SP,
virtual_machine_type_desc AS VM_TYPE,
((physical_memory_kb/1024)/1024) AS MEMORY_GB,
--((physical_memory_in_bytes/1024)/1024) AS MEMORY_GB,
cpu_count AS NO_OF_CPU
FROM sys.dm_os_sys_info;

# ***************************************************************************************************************

#Database Role Members:

SELECT Users.name AS UserName, Roles.name AS RoleName,
    'EXEC sp_droprolemember '+QUOTENAME(Roles.name,'''')+','+QUOTENAME(Users.name,'''')+';' AS Drop_Script,
    'EXEC sp_addrolemember '+QUOTENAME(Roles.name,'''')+','+QUOTENAME(Users.name,'''')+';' AS Add_Script
FROM sys.database_role_members RoleMembers
JOIN sys.database_principals Users
    ON RoleMembers.member_principal_id = Users.principal_id
JOIN sys.database_principals Roles
    ON RoleMembers.role_principal_id = Roles.principal_id
--WHERE Users.name LIKE '%MyUserName%'
--WHERE Roles.name LIKE '%DBRoleName%'

 # Disk Report Detailed
 
 USE master;
GO

CREATE TABLE #Temp
(
[Server] [varchar] (128) NULL,
[Database] [varchar] (128) NULL,
[File Name] [sys].[sysname] NOT NULL,
[Type] [varchar] (60) NULL,
[Path] [varchar] (260) NULL,
[File Size] [varchar] (53) NULL,
[File Used Space] [varchar] (53) NULL,
[File Free Space] [varchar] (53) NULL,
[% Free File Space] [varchar] (51) NULL,
[Autogrowth] [varchar] (53) NULL,
[volume_mount_point] [varchar] (256) NULL,
[Total Volume Size] [varchar] (53) NULL,
[Free Space] [varchar] (53) NULL,
[% Free] [varchar] (51) NULL
)

EXEC sp_MSforeachdb ' USE [?];
INSERT INTO #Temp
SELECT  @@SERVERNAME [Server] ,
        DB_NAME() [Database] ,
        MF.name [File Name] ,
        MF.type_desc [Type] ,
        MF.physical_name [Path] ,
        CAST(CAST(MF.size / 128.0 AS DECIMAL(15, 2)) AS VARCHAR(50)) + '' MB'' [File Size] ,
        CAST(CONVERT(DECIMAL(10, 2), MF.size / 128.0 - ( ( size / 128.0 ) - CAST(FILEPROPERTY(MF.name, ''SPACEUSED'') AS INT) / 128.0 )) AS VARCHAR(50)) + '' MB'' [File Used Space] ,
        CAST(CONVERT(DECIMAL(10, 2), MF.size / 128.0 - CAST(FILEPROPERTY(MF.name, ''SPACEUSED'') AS INT) / 128.0) AS VARCHAR(50)) + '' MB'' [File Free Space] ,
        CAST(CONVERT(DECIMAL(10, 2), ( ( MF.size / 128.0 - CAST(FILEPROPERTY(MF.name, ''SPACEUSED'') AS INT) / 128.0 ) / ( MF.size / 128.0 ) ) * 100) AS VARCHAR(50)) + ''%'' [% Free File Space] ,
        IIF(MF.growth = 0, ''N/A'', CASE WHEN MF.is_percent_growth = 1 THEN CAST(MF.growth AS VARCHAR(50)) + ''%'' 
                                    ELSE CAST(MF.growth / 128 AS VARCHAR(50)) + '' MB''
                                    END) [Autogrowth] ,
        VS.volume_mount_point ,
        CAST(CAST(VS.total_bytes / 1024. / 1024 / 1024 AS DECIMAL(20, 2)) AS VARCHAR(50))
        + '' GB'' [Total Volume Size] ,
        CAST(CAST(VS.available_bytes / 1024. / 1024 / 1024 AS DECIMAL(20, 2)) AS VARCHAR(50))
        + '' GB'' [Free Space] ,
        CAST(CAST(VS.available_bytes / CAST(VS.total_bytes AS DECIMAL(20, 2))
        * 100 AS DECIMAL(20, 2)) AS VARCHAR(50)) + ''%'' [% Free]
FROM    sys.database_files MF
        CROSS APPLY sys.dm_os_volume_stats(DB_ID(''?''), MF.file_id) VS
'

SELECT * FROM #Temp
 
DROP TABLE #Temp
   
# ****************************************************************************************************************************

# Disk Report Usage and Free Space ( OS LEVEL)

SELECT DISTINCT
vs.volume_mount_point [Drive],
CAST((vs.total_bytes / 1048576) /1024 as decimal(12,2)) [TotalGBs],
CAST((vs.available_bytes / 1048576)/1024 as decimal(12,2)) [FreeSpaceGBs],
CAST((CAST(vs.available_bytes / 1048576 as decimal(12,2)) * 100) / (CAST(vs.total_bytes / 1048576 as decimal(12,2))) as decimal(12,2)) [% Free]
FROM
sys.master_files mf
CROSS APPLY sys.dm_os_volume_stats(mf.database_id, mf.[file_id]) vs

# SQL DB Log Size Monitoring

if object_id('tempdb..#dbsize') is not null
drop table #dbsize;
GO
create table #dbsize (database_name sysname, 
currrent_size int, 
max_size int, 
is_unlimited int, 
current_log_size int, 
max_log_size int, 
is_log_unlimited int);
 
exec sp_msforeachdb '
insert #dbsize
select ''?'',
    sum(case when filename like ''%.ldf'' then 0 else size end),
    sum(case when filename like ''%.ldf'' then 0 else maxsize end),
    min(case when filename like ''%.ldf'' then 0 else maxsize end),
    sum(case when filename like ''%.ldf'' then size else 0 end),
    sum(case when filename like ''%.ldf'' then maxsize else 0 end),
    min(case when filename like ''%.ldf'' then maxsize else 0 end)
from [?].sys.sysfiles';
 
select database_name as DatabaseName, 
currrent_size / 128.0 as CurrentDBSize,
    case when is_unlimited = -1 then 'unlimited' else str(max_size/128.0) end as MaxDBSize, 
current_log_size/128.0 as CurrentLogSize,
    case when is_log_unlimited = -1 then 'unlimited' else str(max_log_size/128.0) end as MaxLogSize
from #dbsize
order by database_name;
GO
if object_id('tempdb..#dbsize') is not null
drop table #dbsize;
GO

# *******************************************************************************************************************************

--Script 3: Backup all non-system databases

--1. Variable declaration

DECLARE @path VARCHAR(500)
DECLARE @name VARCHAR(500)
DECLARE @filename VARCHAR(256)
DECLARE @time DATETIME
DECLARE @year VARCHAR(4)
DECLARE @month VARCHAR(2)
DECLARE @day VARCHAR(2)
DECLARE @hour VARCHAR(2)
DECLARE @minute VARCHAR(2)
DECLARE @second VARCHAR(2)
 
-- 2. Setting the backup path

SET @path = 'E:\Backup\'  

 -- 3. Getting the time values

SELECT @time = GETDATE()
SELECT @year   = (SELECT CONVERT(VARCHAR(4), DATEPART(yy, @time)))
SELECT @month  = (SELECT CONVERT(VARCHAR(2), FORMAT(DATEPART(mm,@time),'00')))
SELECT @day    = (SELECT CONVERT(VARCHAR(2), FORMAT(DATEPART(dd,@time),'00')))
SELECT @hour   = (SELECT CONVERT(VARCHAR(2), FORMAT(DATEPART(hh,@time),'00')))
SELECT @minute = (SELECT CONVERT(VARCHAR(2), FORMAT(DATEPART(mi,@time),'00')))
SELECT @second = (SELECT CONVERT(VARCHAR(2), FORMAT(DATEPART(ss,@time),'00')))

-- 4. Defining cursor operations
 
DECLARE db_cursor CURSOR FOR  
SELECT name 
FROM master.dbo.sysdatabases 
WHERE name NOT IN ('master','model','msdb','tempdb')  -- system databases are 
excluded

--5. Initializing cursor operations

OPEN db_cursor   
FETCH NEXT FROM db_cursor INTO @name   

WHILE @@FETCH_STATUS = 0   
BEGIN

-- 6. Defining the filename format
   
       SET @fileName = @path + @name + '_' + @year + @month + @day + @hour + 
@minute + @second + '.BAK'  
       BACKUP DATABASE @name TO DISK = @fileName  

 
       FETCH NEXT FROM db_cursor INTO @name   
END   
CLOSE db_cursor   
DEALLOCATE db_cursor

# **************************************************************************************************************************

#TSQL for Backing up all Databases in SQL

DECLARE @name VARCHAR(50) -- database name   
DECLARE @path VARCHAR(256) -- path for backup files   
DECLARE @fileName VARCHAR(256) -- filename for backup   
DECLARE @fileDate VARCHAR(20) -- used for file name  
 
--Provide the path where all the databases needs to be backed up 
SET @path = 'MyBackupFilePath'   
 
--used to suffix the current date at the end of backup filename 
SELECT @fileDate = CONVERT(VARCHAR(20),GETDATE(),112)  
 
DECLARE db_cursor CURSOR FOR   
 
--Use this for all database except the system databases and any exclusion you can make 
SELECT name  
FROM master.dbo.sysdatabases  
WHERE name NOT IN ('master','model','msdb','tempdb','ReportServer','ReportServerTempDB')   
 
--Uncomment and use this for only specific databases. 
--Those database names you can provide under IN clause 
SELECT name  
FROM master.dbo.sysdatabases  
WHERE name IN ('MyDB1','MyDB2')  
 
 
OPEN db_cursor    
FETCH NEXT FROM db_cursor INTO @name    
 
WHILE @@FETCH_STATUS = 0    
BEGIN    
       SET @fileName = @path + @name + '_' + @fileDate + '.BAK'   
       BACKUP DATABASE @name TO DISK = @fileName WITH STATS = 1   
 
       FETCH NEXT FROM db_cursor INTO @name    
END    
 
CLOSE db_cursor    
DEALLOCATE db_curso

# ********************************************************************************************************************************

# Age of the backup files

------------------------------------------------------------------------------------------- 
--Databases Missing a Data (aka Full) Back-Up Within Past 24 Hours 
------------------------------------------------------------------------------------------- 
--Databases with data backup over 24 hours old 
SELECT 
   CONVERT(CHAR(100), SERVERPROPERTY('Servername')) AS Server, 
   msdb.dbo.backupset.database_name, 
   MAX(msdb.dbo.backupset.backup_finish_date) AS last_db_backup_date, 
   DATEDIFF(hh, MAX(msdb.dbo.backupset.backup_finish_date), GETDATE()) AS [Backup Age (Hours)] 
FROM    msdb.dbo.backupset 
WHERE     msdb.dbo.backupset.type = 'D'  
GROUP BY msdb.dbo.backupset.database_name 
HAVING      (MAX(msdb.dbo.backupset.backup_finish_date) < DATEADD(hh, - 24, GETDATE()))  

UNION  

--Databases without any backup history 
SELECT      
   CONVERT(CHAR(100), SERVERPROPERTY('Servername')) AS Server,  
   master.dbo.sysdatabases.NAME AS database_name,  
   NULL AS [Last Data Backup Date],  
   9999 AS [Backup Age (Hours)]  
FROM 
   master.dbo.sysdatabases LEFT JOIN msdb.dbo.backupset 
       ON master.dbo.sysdatabases.name  = msdb.dbo.backupset.database_name 
WHERE msdb.dbo.backupset.database_name IS NULL AND master.dbo.sysdatabases.name <> 'tempdb' 
ORDER BY  
   msdb.dbo.backupset.database_name 
   
# *****************************************************************************************************************************************

# Powershell Script to Run a SQL query against the SQL server CMS.

#========================================================================
# Created with: SAPIEN Technologies, Inc., PowerShell Studio 2012 v3.0.5
# Created on:   7/25/2012 7:33 PM
# Created by:   cchurchwell
# Organization: PWC
# Filename:     PopulateRemoteDatabase.ps1
#========================================================================


Import-Module SQLPS -DisableNameChecking  

#Path to central management server
$serverGroupPath = "SQLSERVER:\SQLRegistration\Central Management Server Group\<CMSServerName>\<ServerGroup1>"

#Get List of registered Servers from above path
$instanceNameList = dir $serverGroupPath -recurse | select-object Name -Unique

$scriptFile = "C:\tmp\DatabaseScriptToBeRun.sql"
  

#instanceName returns System.Management.Automation.PSCustomObject and have to call .Name to get the actual ServerName.
foreach($instanceName in $instanceNameList) 
{
	$serverName = $instanceName.Name
	
	#Database name can be derived from the Server Name
	$DatabaseName = 'Site-' + $serverName.Substring(2,3)
	
    $DBParam1 = "DatabaseName=" + $DatabaseName
    $DBParams = $DBParam1
	
	Invoke-Sqlcmd -InputFile $scriptFile -Variable $DBParams -ServerInstance $serverName -ConnectionTimeout 300
	
    Write-Output "Script Completed for $serverName"
	  
}

# *********************************************************************************************************************************************