~postgres/.psql_history


#Queries to check the replication status of PostrgeSQL

SELECT pid, wait_event_type, wait_event FROM pg_stat_activity WHERE wait_event is NOT NULL;

select pg_current_xlog_location();
select now() - pg_last_xact_replay_timestamp();
select now() - pg_last_xact_replay_timestamp();
select pg_xlogfile_name(pg_last_xlog_receive_location());
select pg_walfile_name(pg_last_wal_receive_lsn());

select application_name, pg_size_pretty(pg_xlog_location_diff(pg_current_xlog_location(), write_location)) AS delta from pg_stat_replication;

psql -Atc 'select pg_is_in_recovery()'select pg_is_in_recovery();

select now()-pg_last_xact_replay_timestamp() as replication_lag;
select now()-pg_last_xact_replay_timestamp() as replication_lag;
SELECT pg_last_xlog_receive_location();
select pg_last_xact_replay_timestamp();
SELECT CASE WHEN pg_last_xlog_receive_location() =pg_last_xlog_replay_location() THEN 0 ELSE EXTRACT (EPOCH FROM now() -pg_last_xact_replay_timestamp()) END AS log_delay;
SELECT slot_name, database, active, pg_xlog_location_diff(pg_current_xlog_insert_location(), restart_lsn) AS ret_bytes FROM pg_replication_slots;

psql -Atc 'select pg_is_in_recovery()'select pg_is_in_recovery()select pg_is_in_recovery();
psql -Atc 'select pg_is_in_recovery()'select pg_is_in_recovery()select pg_is_in_recovery();

select pg_stat_replication();
SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))::INT;

select now() - pg_last_xact_replay_timestamp();

select now() - pg_last_xact_replay_timestamp() AS replication_delay;

select now() - pg_last_xact_replay_timestamp();
select pg_xlogfile_name(pg_last_xlog_receive_location());
select pg_walfile_name(pg_last_wal_receive_lsn());
select * from pg_stat_wal_receiver;

select now() - pg_last_xact_replay_timestamp() AS replication_delay;
SELECT  pg_last_xlog_receive_location() receive,  pg_last_xlog_replay_location() replay,  (   extract(epoch FROM now()) -   extract(epoch FROM pg_last_xact_replay_timestamp())  )::int lag;

cat ~/.pgpass


select pg_size_pretty(pg_database_size('vvm_prod'));

backup - /home/postgres/backups


select * from pg_stat_activity where state ='active'

SELECT sum(heap_blks_read) as heap_read, sum(heap_blks_hit)  as heap_hit, (sum(heap_blks_hit) - sum(heap_blks_read)) / sum(heap_blks_hit) as ratio
FROM pg_statio_user_tables;

SELECT relname AS table_name, indexrelname AS index_name, idx_scan, idx_tup_read, idx_tup_fetch, pg_size_pretty(pg_relation_size(indexrelname::regclass))
FROM pg_stat_all_indexes
WHERE schemaname = 'public'
AND idx_scan = 0
AND idx_tup_read = 0
AND idx_tup_fetch = 0
ORDER BY pg_relation_size(indexrelname::regclass) DESC;

SELECT pid, age(clock_timestamp(), query_start), usename, query 
FROM pg_stat_activity 
WHERE query != '<IDLE>' AND query NOT ILIKE '%pg_stat_activity%' 
ORDER BY age desc;

SELECT relname, 100 * idx_scan / (seq_scan + idx_scan) percent_of_times_index_used, n_live_tup rows_in_table
FROM pg_stat_user_tables 
ORDER BY n_live_tup DESC;

SELECT d.datname AS Name, pg_catalog.pg_get_userbyid(d.datdba) AS Owner,
  CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT')
    THEN pg_catalog.pg_size_pretty(pg_catalog.pg_database_size(d.datname)) 
    ELSE 'No Access' 
  END AS SIZE 
FROM pg_catalog.pg_database d 
ORDER BY 
  CASE WHEN pg_catalog.has_database_privilege(d.datname, 'CONNECT') 
    THEN pg_catalog.pg_database_size(d.datname)
    ELSE NULL 
  END;

  SELECT nspname || '.' || relname AS "relation",
   pg_size_pretty(pg_total_relation_size(C.oid)) AS "total_size"
 FROM pg_class C
 LEFT JOIN pg_namespace N ON (N.oid = C.relnamespace)
 WHERE nspname NOT IN ('pg_catalog', 'information_schema')
   AND C.relkind <> 'i'
   AND nspname !~ '^pg_toast'
 ORDER BY pg_total_relation_size(C.oid) DESC;

 SELECT pid, now() - query_start as "runtime", usename, datname, waiting, state, query
  FROM  pg_stat_activity
  WHERE now() - query_start > '2 minutes'::interval and state = 'active'
 ORDER BY runtime DESC;